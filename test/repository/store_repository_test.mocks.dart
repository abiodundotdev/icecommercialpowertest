// Mocks generated by Mockito 5.2.0 from annotations
// in icecommercialpowertest/test/repository/store_repository_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:icecommercialpowertest/domain/domain.dart' as _i2;
import 'package:icecommercialpowertest/presentation/store/store.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [StoreRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockStoreRepository extends _i1.Mock implements _i2.StoreRepository {
  MockStoreRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i2.ProductModel>> getProducts() =>
      (super.noSuchMethod(Invocation.method(#getProducts, []),
              returnValue:
                  Future<List<_i2.ProductModel>>.value(<_i2.ProductModel>[]))
          as _i3.Future<List<_i2.ProductModel>>);
  @override
  _i3.Future<List<String>> getCategories() =>
      (super.noSuchMethod(Invocation.method(#getCategories, []),
              returnValue: Future<List<String>>.value(<String>[]))
          as _i3.Future<List<String>>);
  @override
  _i3.Future<List<_i2.CartModel>> getCarts() =>
      (super.noSuchMethod(Invocation.method(#getCarts, []),
              returnValue: Future<List<_i2.CartModel>>.value(<_i2.CartModel>[]))
          as _i3.Future<List<_i2.CartModel>>);
  @override
  _i3.Future<String> updateCart(_i4.CartUpdateType? type, int? cartid) =>
      (super.noSuchMethod(Invocation.method(#updateCart, [type, cartid]),
          returnValue: Future<String>.value('')) as _i3.Future<String>);
}
